//line following program

// sensor arrangement     4     5 node detection
//                         2   3 flank detection
//                           1 center line detection
#define motorInput1 6
#define motorInput2 9
#define motorInput3 10
#define motorInput4 11
#define CS 3 //1
#define RS 7 //2
#define LS 2 //3
#define RRS 4 //4
#define LLS 5 //5
#define led 13
int lv,cv,rv,llv,rrv;
int X=2,Y=-1,XY=0;
int cx=0,cy=0,p=0,f=0,t,k=0;
int x=2,y=-1; // initial coordinate
char s; //direction of flank
char q; // stores the current direction of travel 
int sn,fn; //number of nodes to travel in sides and forward

int sensor[5] = {0,0,0,0,0};

int error1 = 1;
int error2 = 0;
int error3 = 1;
int error4 = 0;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(motorInput1 ,OUTPUT);
  pinMode(motorInput2 ,OUTPUT);
  pinMode(motorInput3 ,OUTPUT);
  pinMode(motorInput4 ,OUTPUT);
  pinMode(led ,INPUT);
  pinMode(LS ,INPUT);
  pinMode(CS ,INPUT);
  pinMode(RS ,INPUT);
  pinMode(LLS ,INPUT);
  pinMode(RRS ,INPUT);
  digitalWrite(led,LOW);
   
  //to calculate the coordinates
  Serial.print("enter X and Y coordinates: ");
  while(Serial.available()== 0){}
  XY=Serial.parseInt();
  X=XY/10;
  Y=XY%10;
  Serial.print("X :  ");
  Serial.print(X);
  Serial.print("\t");
  Serial.print("Y :  ");
  Serial.println(Y);
  delay(2000);
  fn=Y-y;
  sn=X-x;
  Serial.print("number of nodes to travel in FORWARD direction :  ");
  Serial.print(fn);
  Serial.print("\t");
  Serial.print("number of nodes to travel in FLANK direction(- indicates LEFT and + indicates RIGHT) :  ");
  Serial.println(sn);
  delay(2000);
  Serial.println("FOLLOWING begins!!");
  delay(1000);

  //to store the direction of flank travel in a variable
  if (sn>0)
    s='R';
  else if (sn<0)
    {
      s='L';
      sn=abs(sn);
    }
  else 
    s='N'; 
}
 

void loop() {

  //calculate error value
//forward motion  
if(cy!=fn)  
{
read_sensor_values1();
read_sensor_values2();
Serial.print("\t");
Serial.print("errorvalue1: ");
Serial.println(error1);
Serial.print("\t");
Serial.print("errorvalue2: ");
Serial.println(error2);
Serial.print("\t");
Serial.print("  counter: ");
Serial.print(cy);
}

//flank motion
else if(cx!=sn && cy==fn)  
{
read_sensor_values3();
read_sensor_values4();
Serial.print("\t");
Serial.print("errorvalue3: ");
Serial.println(error3);
Serial.print("\t");
Serial.print("errorvalue4: ");
Serial.println(error4);
Serial.print("\t");
Serial.print("  counter: ");
Serial.print(cx);
}

if(cy!=fn) // to move in Y direction untill it reaches the Y target node
{  
   if(error1==1 && error2!=11)
   forward();
   else if(error1==2 && error2!=11)
   {
    //speed control
    sharpLeftTurn();
   }
   else if(error1==3 && error2!=11)
   {
    //speed control
    sharpRightTurn(); 
   }
   else if(error1==4 && error2!=11)
   {
    //speed reduction
    forward();
   }
   else if(error1==5 && error2!=11)
   {//speed reduction
     sharpLeftTurn() ;   
   }
   else if(error1==6 && error2!=11)
   {//speed reduction
     sharpRightTurn(); 
   }

   
   if(error2==11)
  { error2=0;
    read_sensor_values1();
   if(error1==1)
    forward();
   else if(error1==2)
   {
    //speed control
    sharpLeftTurn();
   }
   else if(error1==3)
   {
    //speed control
    sharpRightTurn(); 
   }
   else if(error1==4)
   {
    //speed reduction
    forward();
   }
   else if(error1==5)
   {
     //speed reduction
     sharpLeftTurn() ;   
   }
   else if(error1==6)
   {
    //speed reduction
     sharpRightTurn(); 
   }
   delay(1000);
  }
  
}
else
{
  stop_bot();
  delay(1000);
}


if(cy==fn && cx!=sn && f==0) // to turn the bot at 90 degree at Y target node to follow the X target node
{   
    if(s=='R')
  {
    do
    {
      sharpRightTurn() ;
      delay(1000);
    } while(node_turning_count()!=1);
  }  
  
    if(s=='L')
  {
    do
    {
      sharpLeftTurn() ;
      delay(1000);
    }while(node_turning_count()!=1);
  }   
  forward();
  delay(1000);
  p=0;
  f=1;
}

if(cy==fn && cx!=sn) //movement of bot in X direction
{
  
   if(error3==1 && error4!=11)
   forward();
   else if(error3==2 && error4!=11)
   {
    //speed control
    sharpLeftTurn();
   }
   else if(error3==3 && error4!=11)
   {
    //speed control
    sharpRightTurn(); 
   }
   else if(error3==4 && error4!=11)
   {
    //speed reduction
    forward();
   }
   else if(error3==5 && error4!=11)
   {
    //speed control
    sharpLeftTurn(); 
   }
   else if(error3==6 && error4!=11)
   {
     //speed control
    sharpRightTurn(); 
   }

   
   if(error4==11)
  { error4=0;
    read_sensor_values1();
   if(error1==1)
    forward();
   else if(error3==2)
   {
    //speed control
    sharpLeftTurn();
   }
   else if(error3==3)
   {
    //speed control
    sharpRightTurn(); 
   }
   else if(error3==4)
   {
    //speed reduction
    forward();
   }
   else if(error3==5)
   {
     //speed control
    sharpLeftTurn();     
   }
   else if(error3==6)
   {
    //speed control
    sharpRightTurn(); 
   }
   delay(1000);
  }
}
else
{
  stop_bot();
  delay(1000);
}


if(cy==fn && cx==sn && k==0) //reached the target node so rotate 180 degrees
{
    do 
    {
      sharpLeftTurn() ;
      delay(1000);
    }while(node_turning_count()!=2);
    stop_bot();
    
    //GLOW LED
    digitalWrite(led,HIGH);
    delay(1000);
    digitalWrite(led,LOW);
    
    //reseting the values
    p=0;
    f=0;
    cx=0;
    cy=0;

    //changing the coordinates and directions
    t=fn;
    fn=sn;
    sn=t;
    if(s=='R')
      s='L';
    else if(s=='L')
      s='R';

    //indicate that one round is already done
    k=1;        
    
}

else if(cy==fn && cx==sn && k==1) //reached the initial node so rotate 180 degrees
{
    sharpLeftTurn() ;
    delay(2000);
    Serial.println(" *FOLLOWING ENDS!!!* ");
    
}
}

//END OF LOOP

//BEGINING OF UDF

int node_turning_count() //to count nodes while rotating at intersections
{
  read_sensor_values2(); 
  if((sensor[3] == 1) && (sensor[4] == 1)) //reached the perpendicular node
  {
    p+=1;
  }
  return p;
}



// for FORWARD motion


void read_sensor_values1() 
{ //read the values from the sensor
  lv=digitalRead(LS); 
  rv=digitalRead(RS);
  cv=digitalRead(CS);
  sensor[0] = cv;
  sensor[1] = rv;
  sensor[2] = lv;
    Serial.print("the sensor values from 1 to 3 are:\t\t  ");
    Serial.print("s1:");
    Serial.print(sensor[0]); 
    Serial.print("\t");
    Serial.print("s2:");
    Serial.print(sensor[1]); 
    Serial.print("\t");
    Serial.print("s3:");
    Serial.print(sensor[2]); 
    Serial.print("\t");
  
  if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 0)) // forward
    error1 = 1;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0)) // turn left
    error1 = 2;
  else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 1)) // turn right
    error1 = 3;  
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1)) // slow forward
    error1 = 4;
  else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1)) // turn left
    error1 = 5;  
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1)) // turn right
    error1 = 6;  
/* else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 0)) // 
    error = 5;
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1)) // 
    error = 6;
   else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1)) //
    error = 7;
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0)) // 
    error = 8;   */ 
}

void read_sensor_values2() 
{ //read the values from the sensor
  rrv=digitalRead(RRS);
  llv=digitalRead(LLS);
  sensor[3] = rrv;
  sensor[4] = llv;
  Serial.print("the sensor values from 4 to 5 are:\t\t  ");
  Serial.print("s4:");
  Serial.print(sensor[3]); 
  Serial.print("\t");
  Serial.print("s5:");
  Serial.print(sensor[4]); 
  Serial.print("\t");
  if ((sensor[3] == 1) && (sensor[4] == 1)) //  perfect node
    {
      cy+=1;
      error2 = 11;
    }
/*  else if ((sensor[3] == 0) && (sensor[4] == 1))  
    error = 22;
  else if ((sensor[3] == 0) && (sensor[4] == 0)) 
    error = 33;
  else if ((sensor[3] == 1) && (sensor[4] == 0)) 
    error = 44;*/
}   

//for FLANK motion 

void read_sensor_values3() 
{ //read the values from the sensor
  lv=digitalRead(LS); 
  rv=digitalRead(RS);
  cv=digitalRead(CS);
  sensor[0] = cv;
  sensor[1] = rv;
  sensor[2] = lv;
    Serial.print("the sensor values from 1 to 3 are:\t\t  ");
    Serial.print("s1:");
    Serial.print(sensor[0]); 
    Serial.print("\t");
    Serial.print("s2:");
    Serial.print(sensor[1]); 
    Serial.print("\t");
    Serial.print("s3:");
    Serial.print(sensor[2]); 
    Serial.print("\t");
  
  if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 0)) // forward
    error3 = 1;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0)) // turn left
    error3 = 2;
  else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 1)) // turn right
    error3 = 3;  
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1)) // slow forward
    error3 = 4;
  else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1)) // turn left
    error1 = 5;  
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1)) // turn right
    error1 = 6;    
/* else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 0)) // 
    error = 5;
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1)) // 
    error = 6;
   else if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1)) //
    error = 7;
   else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0)) // 
    error = 8;   */ 
}

void read_sensor_values4() 
{ //read the values from the sensor
  rrv=digitalRead(RRS);
  llv=digitalRead(LLS);
  sensor[3] = rrv;
  sensor[4] = llv;
  Serial.print("the sensor values from 4 to 5 are:\t\t  ");
  Serial.print("s4:");
  Serial.print(sensor[3]); 
  Serial.print("\t");
  Serial.print("s5:");
  Serial.print(sensor[4]); 
  Serial.print("\t");
  if ((sensor[3] == 1) && (sensor[4] == 1)) //  perfect node
    {
      cx+=1;
      error4 = 11;
    }
/*  else if ((sensor[3] == 0) && (sensor[4] == 1))  
    error = 22;
  else if ((sensor[3] == 0) && (sensor[4] == 0)) 
    error = 33;
  else if ((sensor[3] == 1) && (sensor[4] == 0)) 
    error = 44;*/
}   





void forward()  //move forward
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, 1);
  digitalWrite(motorInput2, 0);
  digitalWrite(motorInput3, 1);
  digitalWrite(motorInput4, 0);
  Serial.println("forward");
  
}
void reverse() //move backward
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, 0);
  digitalWrite(motorInput2, 1);
  digitalWrite(motorInput3, 0);
  digitalWrite(motorInput4, 1);
  Serial.println("reverse");
  
}
void right() //move left with one motor stopped and other running
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, 0);
  digitalWrite(motorInput2, 0);
  digitalWrite(motorInput3, 1);
  digitalWrite(motorInput4, 0);
  Serial.println("right");
  q='r';
}
void left() //move right with one motor stopped and other running
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, 1);
  digitalWrite(motorInput2, 0);
  digitalWrite(motorInput3, 0);
  digitalWrite(motorInput4, 0);
  Serial.println("left");
  q='l';
}
void sharpRightTurn()  //move right with both the wheels moving in opposite direction
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, 0);
  digitalWrite(motorInput2, 1);
  digitalWrite(motorInput3, 1);
  digitalWrite(motorInput4, 0);
  Serial.println("right");
  
}
void sharpLeftTurn() //move left with both the wheels moving in opposite direction
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, 1);
  digitalWrite(motorInput2, 0);
  digitalWrite(motorInput3, 0);
  digitalWrite(motorInput4, 1);
  Serial.println("left");
  
}
void stop_bot() //motors stop running
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, 0);
  digitalWrite(motorInput2, 0);
  digitalWrite(motorInput3, 0);
  digitalWrite(motorInput4, 0);
  Serial.println("stop");
  
}